{"version":3,"sources":["services/images.js","components/DrawingCanvas.js","components/Results.js","App.js","index.js"],"names":["services_images","image","width","height","axios","post","then","res","data","DrawingCanvas","_ref","setProbabilities","_useState","useState","_useState2","Object","slicedToArray","drawing","setDrawing","refLarge","React","createRef","refSmall","redrawSmall","ctx","current","getContext","clearRect","drawImage","draw","x","y","beginPath","arc","Math","PI","fill","react_default","a","createElement","className","style","margin","border","cursor","ref","onMouseDown","onMouseUp","onMouseMove","event","rect","getBoundingClientRect","xOffset","left","yOffset","top","clientX","clientY","Button","onClick","imageData","getImageData","values","Array","prototype","slice","call","filter","el","ind","imageService","console","log","concat","JSON","stringify","probabilities","Result","number","probability","percentage","predicted","percentageString","toFixed","Fragment","stroke","strokeWidth","rx","ry","Results","_ref2","arr","max","index","forEach","val","argmax","map","p","Results_Result","key","App","components_DrawingCanvas","components_Results","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.db4c709a.chunk.js","sourcesContent":["import axios from 'axios'\n// const url = 'http://localhost:3000/api'\nconst url = '/api'\n\nconst send = (image, width, height) => {\n  // console.log(`sending image, image is ${image}`)\n  return axios\n    .post(url, { image, width, height })\n    .then(res => res.data)\n}\n\nexport default { send }","import React, { useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport imageService from '../services/images'\n\nconst DrawingCanvas = ({ setProbabilities }) => {\n  const width = 28*8 // MNIST images are of size 28*28\n  const height = 28*8\n  const smallWidth = 28\n  const smallHeight = 28\n  const [drawing, setDrawing] = useState(false)\n  const refLarge = React.createRef()\n  const refSmall = React.createRef()\n  const largeCanvasStyle = {\n    border: '1px solid black',\n    cursor: 'crosshair'\n  }\n  const smallCanvasStyle = {\n    border: '1px solid black',\n    margin: '5px'\n  }\n  const handleMouseDown = () => {\n    setDrawing(true)\n  }\n  const handleMouseUp = () => {\n    setDrawing(false)\n    redrawSmall()\n  }\n  const redrawSmall = () => {\n    const ctx = refSmall.current.getContext('2d')\n    ctx.clearRect(0, 0, smallWidth, smallHeight)\n    ctx.drawImage(refLarge.current, 0, 0, smallWidth, smallHeight)\n  }\n  const handleMouseMove = (event) => {\n    if (drawing) {\n      const rect = refLarge.current.getBoundingClientRect();\n      const xOffset = rect.left\n      const yOffset = rect.top\n      // const x = event.clientX\n      // const y = event.clientY\n      const x = event.clientX - xOffset\n      const y = event.clientY - yOffset\n      const ctx = refLarge.current.getContext('2d')\n      // console.log(`(${x}, ${y})`)\n      draw(ctx, x, y)\n    }\n  }\n  const draw = (ctx, x, y) => {\n    const r = 10\n    ctx.beginPath()\n    ctx.arc(x, y, r, 0.0, 2 * Math.PI, false)\n    ctx.fill()\n  }\n  const handleClear = () => {\n    refLarge.current.getContext('2d').clearRect(0, 0, width, height)\n    refSmall.current.getContext('2d').clearRect(0, 0, smallWidth, smallHeight)\n  }\n  const handleSend = () => {\n    redrawSmall()\n    const ctx = refSmall.current.getContext('2d')\n    const imageData = ctx.getImageData(0, 0, smallWidth, smallHeight)\n    const values = Array.prototype.slice.call(imageData.data)\n      .filter((el, ind) => ind % 4 === 3)\n    imageService\n      .send(values, smallWidth, smallHeight)\n      .then(res => {\n        console.log(`got response ${JSON.stringify(res)}`)\n        setProbabilities(res.probabilities)\n      })\n  }\n  return(\n    <div className=\"col\" style={{margin: \"20px\"}} >\n      <h2>Draw your digit (0–9) here</h2>\n      <canvas\n        style={largeCanvasStyle}\n        ref={refLarge}\n        width={width}\n        height={height}\n        onMouseDown={handleMouseDown}\n        onMouseUp={handleMouseUp}\n        onMouseMove={handleMouseMove} />\n      <br />\n      <Button onClick={handleClear} >Clear</Button>\n      <Button onClick={handleSend} >Send</Button>\n      <br />\n      <canvas\n        style={smallCanvasStyle}\n        ref={refSmall}\n        width={28}\n        height={28}\n        />\n      <p>Your digit in MNIST size (28×28 pixels)</p>\n  </div>\n  )\n}\n\nexport default DrawingCanvas","import React from 'react'\n\nconst Result = ({ number, probability, predicted }) => {\n  const percentage = probability * 100\n  const percentageString = `${percentage.toFixed(2)} %`\n  const y = number * 30\n  return (\n    <>\n      <svg width=\"200\" height=\"30\" y={y}>\n        <g>\n          <rect width={100} height=\"20\" style={{stroke: 'black', strokeWidth: '1px', fill: 'white'}} x=\"20\" rx=\"3\" ry=\"3\"/>\n          <rect width={percentage} height=\"20\" style={{fill: '#0033FF'}} x=\"20\" rx=\"3\" ry=\"3\"/>\n          <text fill=\"black\" x=\"0\" y=\"15\">{number}</text>\n          <text fill=\"black\" x=\"130\" y=\"15\">{percentageString}</text>\n        </g>\n      </svg>\n    </>\n  )\n}\n\nconst Results = ({ probabilities }) => {\n  const argmax = (arr) => {\n    var max = 0\n    var index = 0\n    arr.forEach((val, ind) => {\n      if (val > max) {\n        max = val\n        index = ind\n      }\n    })\n    return index\n  }\n\n  const predicted = argmax(probabilities)\n\n  return(\n    <div className=\"col\" style={{margin: \"20px\"}}>\n      <h3>The digit you drew is {predicted}.</h3>\n      <svg width=\"250\" height=\"600\" >\n      {probabilities.map((p, ind) => \n        <Result key={ind} number={ind} probability={p} predicted={ind === predicted} />) }\n      </svg>\n    </div>\n  )\n}\n\nexport default Results","import React, { useState } from 'react';\nimport DrawingCanvas from './components/DrawingCanvas'\nimport Results from './components/Results'\n\nconst App = () => {\n  const [probabilities, setProbabilities] = useState(null)\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <DrawingCanvas setProbabilities={setProbabilities} />\n        { probabilities && <Results probabilities={probabilities} /> }\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}